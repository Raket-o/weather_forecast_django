#docker-compose.yml
version: "3"


services:
  postgres_db:
    image: postgres:alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    restart: always
    ports:
      - "5434:${DB_PORT}"
    volumes:
      - ./postgres_db/db/:/var/lib/postgres_db/data/
      - ./postgres_db/db/:/logs/
    #    command: ["postgres", "-c", "log_destination=stderr", "-c", "logging_collector=on", "-c", "log_directory=/logs", "-c", "log_filename=postgresql.log", "-c", "log_statement=all"]
    command: [ "postgres", "-c", "log_statement=all" ]
    expose:
      - 5434
    networks:
      weather_forecast_django:
        ipv4_address: 192.168.55.4

#  django:
#    depends_on:
#      - postgres_db
#    build: .
#    container_name: django
#    command: bash -c "
#      python manage.py migrate
#      && python manage.py 1_add_group_users
#      && python manage.py 2_add_permissions
#      && python manage.py 3_add_group_permissions
#      && python manage.py 4_add_superuser
#      && gunicorn django_crm.wsgi:application --bind "0.0.0.0:8080" --workers 3
#      "
#    volumes: [ './django_crm/uploads/:/app/uploads']
#    restart: unless-stopped
#    ports:
#      - "8080:8080"
#    networks:
#      advertising_services_network:
#        ipv4_address: 192.168.55.5

networks:
  weather_forecast_django:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.55.0/24
          gateway: 192.168.55.1
